/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import com.jgoodies.looks.plastic.PlasticXPLookAndFeel;
import com.sugarcrm.www.sugarcrm.Entry_value;
import com.sugarcrm.www.sugarcrm.SugarsoapBindingStub;
import java.io.IOException;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.net.URL;
import java.rmi.RemoteException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.LogManager;
import java.util.logging.Logger;
import javax.xml.rpc.Service;
import javax.xml.rpc.ServiceException;
import javax.xml.rpc.ServiceFactory;
import org.apache.axis.AxisFault;
import com.sugarcrm.www.sugarcrm.SugarsoapLocator;
import com.sugarcrm.www.sugarcrm.User_auth;
import java.util.Arrays;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.UIManager;

/**
 *
 * @author oleg
 */
public class AppLauncher extends javax.swing.JFrame {
    
    /**
     * Creates new form AppLauncher
     */
    public AppLauncher() {
        this.setLocationRelativeTo(null);
        initComponents();
    }
    
    private static Logger log = Logger.getLogger(AppLauncher.class.getName());
    private static final String END_POINT_URL = "http://127.0.0.1/service/v4_1/soap.php?wsdl";
    private static final Integer TIMEOUT = 6000;
    private static final String APPLICATION_NAME = Class.class.getName();
    private static final Boolean DEBUG_MODE = true;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jOptionPane1 = new javax.swing.JOptionPane();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        user_password = new javax.swing.JPasswordField();
        user_name = new javax.swing.JTextField();
        jButtonEnter = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Вход в программу");

        jLabel1.setText("Имя пользователя");

        jLabel2.setText("Пароль");

        user_password.setColumns(10);

        user_name.setColumns(15);

        jButtonEnter.setText("Войти");
        jButtonEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEnterActionPerformed(evt);
            }
        });

        jButtonCancel.setText("Отменить");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jButtonEnter, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonCancel, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(user_password)
                    .addComponent(user_name))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(user_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(user_password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonEnter)
                    .addComponent(jButtonCancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        log.info("Авторизация отменена");
        this.dispose();
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEnterActionPerformed
        if (DEBUG_MODE) {
            // Закрываем окно входа и открываем главное окно программы
            MainFrame mf = new MainFrame();
            mf.setTitle("CRM Гравис -- debug_mode ");
            mf.setVisible(true);
            this.dispose();
        } else {
            String sessionID = null;
            // Проверяем пароль
            String password = new String(user_password.getPassword());
            if (isPasswordCorrect(password)) {
                // Проверка на корректность формата пароля пройдена
                // Проверяем сам пароль в SugarCRM
                try {
                    // Create a URL end point for the client
                    URL wsdlUrl = null;
                    if (END_POINT_URL.isEmpty()) {
                        wsdlUrl = new URL(new SugarsoapLocator().getsugarsoapPortAddress() + "?wsdl");
                    } else {
                        wsdlUrl = new URL(END_POINT_URL);
                    }
                    log.info("URL endpoint created successfully!");
                    // Create Service for test configuration
                    ServiceFactory serviceFactory = ServiceFactory.newInstance();
                    Service service = serviceFactory.createService(wsdlUrl, new SugarsoapLocator().getServiceName());
                    log.info("Service created successfully");
                    log.info("Service Name:" + service.getServiceName().toString());
                    log.info("Service WSDL:" + service.getWSDLDocumentLocation().toString());
                    // Trying to create a stub
                    SugarsoapBindingStub binding = new SugarsoapBindingStub(wsdlUrl, service);
                    binding.setTimeout(TIMEOUT);
                    log.info("Stub created successfully!");
                    /**
                    * Try to login on SugarCRM
                    *
                    * 1) Prepare a MD5 hash password 2) Prepare a User Auth object 3)
                    * Execute login
                    */
                    // 1. Prepare a MD5 hash password
                    MessageDigest messageDigest;
                    try {
                        messageDigest = MessageDigest.getInstance("MD5");
                        messageDigest.update(password.getBytes());
                        // 2. Prepare a User Auth object
                        User_auth userAuthInfo = new User_auth();
                        userAuthInfo.setUser_name(user_name.getText());
                        userAuthInfo.setPassword((new BigInteger(1, messageDigest.digest())).toString(16));
                        try {
                            // 3. Execute login
                            Entry_value loginResult = binding.login(userAuthInfo, APPLICATION_NAME, null);
                            log.info("Login Successfully for " + user_name.getText());
                            log.info("Your session Id: " + loginResult.getId());
                            sessionID = loginResult.getId();
                            // Успешно залогинились!
                            // Закрываем окно входа и открываем главное окно программы
                            MainFrame mf = new MainFrame();
                            mf.setTitle("CRM Гравис -- пользователь " + user_name.getText());
                            mf.setVisible(true);
                            this.dispose();
                        } catch (RemoteException ex) {
                            jOptionPane1.showMessageDialog(null, "Не верные имя пользователя и/или пароль. Попробуйте ещё раз.", "Ошибка авторизации", JOptionPane.ERROR_MESSAGE);
                            log.info("Login failed. Message: " + ex.getMessage());
                            ex.printStackTrace();
                        }
                    } catch (NoSuchAlgorithmException ex) {
                        log.severe(this.getName() + ex);
                    }
                    try {
                        binding.get_server_info();
                    } catch (RemoteException ex) {
                        log.severe(this.getName() + ex);
                    }
                    /**
                    * Logout
                    */
                    /*try {
                        binding.logout(sessionID);
                        log.info("Logout Successfully for " + user_name);
                        sessionID = null;
                    } catch (RemoteException ex) {
                        log.info("Login failed. Message: " + ex.getMessage());
                        ex.printStackTrace();
                    }*/
                } catch (MalformedURLException ex) {
                    log.info("URL endpoing creation failed. Message: " + ex.getMessage());
                    ex.printStackTrace();
                } catch (ServiceException ex) {
                    log.info("Service creation failed. Message: " + ex.getMessage());
                    ex.printStackTrace();
                } catch (AxisFault ex) {
                    log.info("AxisFault. Message: " + ex.getMessage());
                    ex.printStackTrace();
                }

            } else {
                jOptionPane1.showMessageDialog(null, "Введён недопустимый пароль. Попробуйте ещё раз.", "Ошибка авторизации", JOptionPane.ERROR_MESSAGE);
            }

            user_password.selectAll();
            resetFocus();
        }
        
    }//GEN-LAST:event_jButtonEnterActionPerformed

    /**
     * Checks the passed-in array against the correct password.
     * After this method returns, you should invoke eraseArray
     * on the passed-in array.
     */
    private static boolean isPasswordCorrect(String password) {
        boolean isCorrect = false;
        // Допустимы только латинские буквы и цифры. Длина пароля от 4 до 15 символов
        Pattern pasPattern1 = Pattern.compile("\\w*"); //(^[a-zA-Z0-9]+$).{4,15}
        Matcher m = pasPattern1.matcher(password);
        if(m.matches()) {
            isCorrect = true;
        }
        else {
            log.info("Введён недопустимый пароль");
            isCorrect = false;
        }
        return isCorrect;
    }
    //Must be called from the event dispatch thread.
    protected void resetFocus() {
        user_password.requestFocusInWindow();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws ClassNotFoundException {
        try {
            LogManager.getLogManager().readConfiguration(
                    AppLauncher.class.getResourceAsStream("/logging.properties"));
        } catch (IOException e) {
            System.err.println("Could not setup logger configuration: " + e.toString());
        }
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } /*catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppLauncher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppLauncher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppLauncher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppLauncher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        try {
            UIManager.setLookAndFeel(new PlasticXPLookAndFeel());
         } catch (Exception e) {}
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppLauncher().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonEnter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JTextField user_name;
    private javax.swing.JPasswordField user_password;
    // End of variables declaration//GEN-END:variables
}
